library(astsa)
acf2(X)
acf(Y)
acf2(Y)
acf2(X)
acf2(Y)
sigma_w = 1
sigma_v = 10
sigma = sigma_w/(1-0.9^2)
X_01 = rnorm(2,0, sqrt(sigma) )
X = c(X_01 , rep(0,100))
for (i in 3:102) {
X[i] = X[i-2]+rnorm(1,0,sqrt(sigma_w))
}
Y = rep(0,100)
for (j in 1:100) {
Y[j] = X[j] + rnorm(1,0,sqrt(sigma_v))
}
acf2(X)
acf2(Y)
acf2(X)
for (i in 3:102) {
X[i] = -0.9X[i-2]+rnorm(1,0,sqrt(sigma_w))
}
X[i] = -0.9*X[i-2]+rnorm(1,0,sqrt(sigma_w))
for (i in 3:102) {
X[i] = -0.9*X[i-2]+rnorm(1,0,sqrt(sigma_w))
}
sigma_w = 1
sigma_v = 10
sigma = sigma_w/(1-0.9^2)
X_01 = rnorm(2,0, sqrt(sigma) )
X = c(X_01 , rep(0,100))
for (i in 3:102) {
X[i] = -0.9*X[i-2]+rnorm(1,0,sqrt(sigma_w))
}
Y = rep(0,100)
for (j in 1:100) {
Y[j] = X[j] + rnorm(1,0,sqrt(sigma_v))
}
acf2(X)
acf2(Y)
library(tseries)
adf.test(Y)
plot(x)
plot(X)
plot(ts(X))
plot(ts(Y))
adf.test(X) #Stationær
adf.test(Y) #Stationær
acf2(X) #Passer med en AR2.
acf2(Y) #AR2 med støj.
library(rugarch)
x_t[i+1] = [x_t[i] + rnorm]
x_t[i+1] = x_t[i] + rnorm
x_t = rep(0,201)
for (i in 1:200) {
x_t[i+1] = x_t[i] + rnorm
}
for (i in 1:200) {
x_t[i+1] = x_t[i] + rnorm(1,0,1)
}
plot(x_t)
x_t = ts(rep(0,201))
for (i in 1:200) {
x_t[i+1] = x_t[i] + rnorm(1,0,1)
}
plot(x_t)
library(astsa)
acf(x_t)
acf2(x_t)
x_t = ts(rep(0,201))
for (i in 1:200) {
x_t[i+1] = 2 + x_t[i] + rnorm(1,0,1)
}
plot(x_t)
acf2(x_t)
library(teseries)
library(tseries)
?arima.sim
arima.sim(n = 63, list(ar = c(0.8897, -0.48444), ma = c(-0.2279, 0.2488)),
sd = sqrt(0.1796))
X = arima.sim(n = 63, list(ar = c(0.8897, -0.48444), ma = c(-0.2279, 0.2488)),
sd = sqrt(0.1796))
plot(X)
Model = arima(X , order = c(7,0,7))
Model = arima(X , order = c(7,0,7) , method = "ML")
Model
X = arima.sim(n = 1000, list(ar = c(0.8897, -0.48444), ma = c(-0.2279, 0.2488)),
sd = sqrt(0.1796))
Model = arima(X[1:900] , order = c(7,0,7) , method = "ML")
Model
forecast(Model, h = 100)
library(forecast)
forecast(Model, h = 100)
Fore = forecast(Model, h = 100)
plot(Fore)
Fore = forecast(Model, h = 1000)
plot(Fore)
sigma2 <- 1
Phi1 <- 0.2
arma.spec(ar=c(rep(0,11), Phi1), var.noise = sigma2, log = "no",
main = "SAR(1)_12 spektraltæthed (Phi=0.2)")
library(tseries)
sigma2 <- 1
Phi1 <- 0.2
arma.spec(ar=c(rep(0,11), Phi1), var.noise = sigma2, log = "no",
main = "SAR(1)_12 spektraltæthed (Phi=0.2)")
library(astsa)
sigma2 <- 1
Phi1 <- 0.2
arma.spec(ar=c(rep(0,11), Phi1), var.noise = sigma2, log = "no",
main = "SAR(1)_12 spektraltæthed (Phi=0.2)")
arma.spec(ar=c(rep(0,11), Phi1), var.noise = sigma2, log = "no",
main = "SAR(1)_12 spektraltæthed (Phi=0.2)")
sigma2 <- 1
Phi1 <- -0.2
arma.spec(ar=c(rep(0,11), Phi1), var.noise = sigma2, log = "no",
main = "SAR(1)_12 spektraltæthed (Phi=0.2)")
Phi1 <- 0.9
arma.spec(ar=c(rep(0,11), Phi1), var.noise = sigma2, log = "no",
main = "SAR(1)_12 spektraltæthed (Phi=0.2)")
Phi1 <- 0.01
arma.spec(ar=c(rep(0,11), Phi1), var.noise = sigma2, log = "no",
main = "SAR(1)_12 spektraltæthed (Phi=0.2)")
Phi1 <- -0.01
arma.spec(ar=c(rep(0,11), Phi1), var.noise = sigma2, log = "no",
main = "SAR(1)_12 spektraltæthed (Phi=0.2)")
Phi1 <- 0.01
arma.spec(ar=c(rep(0,11), Phi1), var.noise = sigma2, log = "no",
main = "SAR(1)_12 spektraltæthed (Phi=0.2)")
read.table("https://archive.ics.uci.edu/ml/machine-learning-databases/00244/fertility_Diagnosis.txt" , sep =",")
data =read.table("https://archive.ics.uci.edu/ml/machine-learning-databases/00244/fertility_Diagnosis.txt" , sep =",")
fert =read.table("https://archive.ics.uci.edu/ml/machine-learning-databases/00244/fertility_Diagnosis.txt" , sep =",")
remove(data)
names(fert) = c("Season", "Age" , "Child_diseases" , "Accident" , "Surg_interv" , "High_fevers", "Alcohol_cons",
"Smoking_freq", "Sitting_hours", "Diagnosis")
head(fert)
unique(fert$Season)
library(tidyverse)
nor = fert[fert$Diagnosis == "N",]
nor = fert[fert$Diagnosis == "N",] %>% .[,-10]
pairs(nor)
cor(nor)
cor(nor) %>% image()
pr.nor = prcomp(nor); pr.nor
pr.nor = prcomp(nor); pr.nor %>% summary()
screeplot(pr.nor)
biplot(pr.nor)
pr.sta.nor = prcomp(nor, scale = T)
pr.sta.nor
pr.sta.nor %>% summary()
pr.sta.nor %>% screeplot()
pr.sta.nor %>% biplot()
#Factor analysis
fa.nor3.rot = factanal(fert, rotation = "none")
#Factor analysis
fa.nor3.rot = factanal(fert, rotation = "none")
#Factor analysis
fa.nor3.rot = factanal(nor, rotation = "none")
#Factor analysis
fa.nor3.rot = factanal(nor)
#Factor analysis
fa.nor3.rot = factanal(nor, factors = 3)
#Factor analysis
fa.nor3.rot = factanal(nor, factors = 3 , rotation = "none")
fa.nor3.rot
#Factor analysis
fa.nor3.rot = factanal(nor, factors = 2 , rotation = "none")
fa.nor3.rot
#Factor analysis
fa.nor3.rot = factanal(nor, factors = 1 , rotation = "none")
fa.nor3.rot
#Factor analysis
fa.nor3.rot = factanal(nor, factors = 5 , rotation = "none")
fa.nor3.rot
#Factor analysis
fa.nor3.rot = factanal(nor, factors = 4 , rotation = "none")
fa.nor3.rot
#Factor analysis
fa.nor3.rot = factanal(nor, factors = 7 , rotation = "none")
#Factor analysis
fa.nor3.rot = factanal(nor, factors = 6 , rotation = "none")
#Factor analysis
fa.nor3.rot = factanal(nor, factors = 0 , rotation = "none")
#Factor analysis
fa.nor3.rot = factanal(nor, factors = 2 , rotation = "none")
fa.nor3.rot
#Factor analysis
fa.nor3.rot = factanal(nor, factors = 2 , rotation = "varimax")
fa.nor3.rot
#Factor analysis
fa.nor3.rot = factanal(nor, factors = 3 , rotation = "none")
fa.nor3.rot
fa.nor3 = factanal(nor, factors = 3 , rotation = "varimax")
fa.nor3
fa.nor3 = factanal(nor, factors = 2 , rotation = "varimax")
fa.nor3 = factanal(nor, factors = 3 , rotation = "varimax")
fa.nor2
fa.nor2 = factanal(nor, factors = 2 , rotation = "varimax")
fa.nor2
#Factor scores
fa.nor2.rot = factanal(nor, factors = 2 , rotation = "varimax" , scores = "Bartlett")
fa.nor2.rot$scores %>% head()
fa.nor2.rot.reg = factanal(nor, factors = 2 , rotation = "varimax" , scores = "regression")
fa.nor2.rot.reg$scores %>% head()
fa.nor2.rot.reg$scores %>% plot()
fa.nor2.rot.reg$scores %>% plot(type = "l")
fa.nor2.rot.reg$scores %>% plot()
View(fert)
#Function for Calculating Returns
returns = function(data, series = NULL, logreturns = T, Date = T){
if(is.vector(data)){
if(logreturns){
return(c(NA,log(data[2:length(data)]) - log(data[2:length(data)-1])))
}else{
return(c(NA,(data[2:length(data)]-data[2:length(data)-1])/data[2:length(data)-1]))
}
}
if(!is.tibble(data)|!is.data.frame(data)){
data = as.tibble(data)
}
name_data = names(data)
if(is.null(series)){
idx = 2
name_vector = name_data[idx]
}else{
idx = series
if(is.numeric(series)){
name_vector = name_data[idx]
}else{
name_vector = series
}
}
placeholder = as.matrix(data[,idx])
n = dim(placeholder)[1]
name_returns = c()
for(name in name_vector){
name_returns = c(name_returns, paste("Returns_",name, sep = ""))
}
#browser()
if(logreturns){
return_matrix = log(placeholder[2:n,]) - log(placeholder[2:n - 1,])
result = as.tibble(cbind(as.matrix(data[2:n,]),return_matrix))
names(result) = c(name_data,name_returns)
}else{
return_matrix = (placeholder[2:n,] - placeholder[2:n - 1,])/placeholder[2:n - 1,]
result = as.tibble(cbind(as.matrix(data[2:n,]),return_matrix))
names(result) = c(name_data,name_returns)
}
result[,-1] = lapply(result[,-1],as.numeric)
return(result)
}
Oil = Quandl('OPEC/ORB' , start_date= "2007-12-31", end_date = "2017-12-31")
pacman::p_load(Quandl, tidyverse)
Oil = Quandl('OPEC/ORB' , start_date= "2007-12-31", end_date = "2017-12-31")
Gold = Quandl('WGC/GOLD_DAILY_USD', start_date= "2007-12-31" , end_date = "2017-12-31")
SP500 = read.csv("./RAWDATA/^GSPC.csv", stringsAsFactors=FALSE) %>% .[,c(1,5)]
setwd("C:/Users/Mathias/Dropbox/P7 - P6(OLD)/P7/R dokumenter")
SP500 = read.csv("./RAWDATA/^GSPC.csv", stringsAsFactors=FALSE) %>% .[,c(1,5)]
SP500$Date = SP500$Date %>% as.Date()
Gold$Date = Gold$Date %>% as.Date()
Oil$Date = Oil$Date %>% as.Date()
Index_Gold = which(!(Gold$Date %in% SP500$Date ))
Gold = Gold[-Index_Gold,] %>% arrange(Date)
Index_Oil = which(!(Oil$Date %in% SP500$Date ))
Oil = Oil[-Index_Oil,]  %>% arrange(Date)
Index_Oil_Missing = which(!(SP500$Date %in% Oil$Date ))
Gold = Gold[-Index_Oil_Missing,]
SP500 = SP500[-Index_Oil_Missing,]
remove(Index_Gold,Index_Oil,Index_Oil_Missing)
#Computing returns
Gold_returns = returns(Gold$Value)[-1]*100
Oil_returns = returns(Oil$Value)[-1]*100
SP500_returns = returns(SP500$Close)[-1]*100
#Making a data frame
Return_DF = cbind.data.frame(SP500, Gold$Value , Oil$Value ); names(Return_DF) = c("Date", "SP500", "Gold", "Oil")
Return_DF = Return_DF %>% returns(series = c("SP500","Gold","Oil")) %>% mutate(Date = as.Date(Date))
View(Return_DF)
100*NA
#Function for Calculating Returns
returns = function(data, series = NULL, logreturns = T, Date = T){
if(is.vector(data)){
if(logreturns){
return(100*c(NA,log(data[2:length(data)]) - log(data[2:length(data)-1])))
}else{
return(100*c(NA,(data[2:length(data)]-data[2:length(data)-1])/data[2:length(data)-1]))
}
}
if(!is.tibble(data)|!is.data.frame(data)){
data = as.tibble(data)
}
name_data = names(data)
if(is.null(series)){
idx = 2
name_vector = name_data[idx]
}else{
idx = series
if(is.numeric(series)){
name_vector = name_data[idx]
}else{
name_vector = series
}
}
placeholder = as.matrix(data[,idx])
n = dim(placeholder)[1]
name_returns = c()
for(name in name_vector){
name_returns = c(name_returns, paste("Returns_",name, sep = ""))
}
#browser()
if(logreturns){
return_matrix = log(placeholder[2:n,]) - log(placeholder[2:n - 1,])
result = as.tibble(cbind(as.matrix(data[2:n,]),return_matrix))
names(result) = c(name_data,name_returns)
}else{
return_matrix = (placeholder[2:n,] - placeholder[2:n - 1,])/placeholder[2:n - 1,]
result = as.tibble(cbind(as.matrix(data[2:n,]),return_matrix))
names(result) = c(name_data,name_returns)
}
result[,-1] = lapply(result[,-1],as.numeric)
return(result)
}
#Making a data frame
Return_DF = cbind.data.frame(SP500, Gold$Value , Oil$Value ); names(Return_DF) = c("Date", "SP500", "Gold", "Oil")
Return_DF = Return_DF %>% returns(series = c("SP500","Gold","Oil")) %>% mutate(Date = as.Date(Date))
View(Return_DF)
#Making a data frame
Return_DF = cbind.data.frame(SP500, Gold$Value , Oil$Value ); names(Return_DF) = c("Date", "SP500", "Gold", "Oil")
Return_DF = Return_DF %>% returns(series = c("SP500","Gold","Oil")) %>% mutate(Date = as.Date(Date))
# Data OOS ----
Oil_OOS = Quandl('OPEC/ORB' , start_date= "2017-12-31", end_date = "2018-09-30")
Gold_OOS = Quandl('WGC/GOLD_DAILY_USD', start_date= "2007-12-31" , end_date = "2017-09-30")
Gold_OOS = Quandl('WGC/GOLD_DAILY_USD', start_date= "2017-12-31" , end_date = "2017-09-30")
Gold_OOS = Quandl('WGC/GOLD_DAILY_USD', start_date= "2017-12-31" , end_date = "2018-09-30")
SP500_OOS = read.csv("./RAWDATA/^GSPC_OOS.csv", stringsAsFactors=FALSE) %>% .[,c(1,5)]
SP500_OOS$Date = SP500$Date %>% as.Date()
Gold_OOS$Date = Gold$Date %>% as.Date()
SP500_OOS$Date = SP500_OOS$Date %>% as.Date()
Gold_OOS$Date = Gold_OOS$Date %>% as.Date()
Oil_OOS$Date = Oil_OOS$Date %>% as.Date()
Index_Gold = which(!(Gold_OOS$Date %in% SP500_OOS$Date ))
Gold_OOS[Index_Gold]
Gold_OOS[Index_Gold,1]
Gold_OOS = Gold_OOS[-Index_Gold,] %>% arrange(Date)
Index_Oil = which(!(Oil_OOS$Date %in% SP500_OOS$Date ))
Oil_OOS[Index_Oil,1]
Oil = Oil[-Index_Oil,]  %>% arrange(Date)
Oil_OOS = Oil_OOS[-Index_Oil,]  %>% arrange(Date)
source('C:/Users/Mathias/Dropbox/P7 - P6(OLD)/P7/R dokumenter/DataAndReturnFct.R')
Index_Gold = which(!(Gold_OOS$Date %in% SP500_OOS$Date ))
Index_Oil = which(!(Oil_OOS$Date %in% SP500_OOS$Date ))
Index_Oil = which((Oil_OOS$Date %in% SP500_OOS$Date ))
Index_Gold = which((Gold_OOS$Date %in% SP500_OOS$Date ))
source('C:/Users/Mathias/Dropbox/P7 - P6(OLD)/P7/R dokumenter/DataAndReturnFct.R')
Gold_returns_OOS = returns(Gold_OOS$Value)[-1]*100
Oil_returns_OOS = returns(Oil_OOS$Value)[-1]*100
SP500_returns_OOS = returns(SP500_OOS$Close)[-1]*100
remove(Index_Gold,Index_Oil,Index_Oil_Missing)
#Making a data frame
Return_DF_OOS = cbind.data.frame(SP500_OOS, Gold_OOS$Value , Oil_OOS$Value ); names(Return_DF_OOS) = c("Date_OOS", "SP500_OOS", "Gold_OOS", "Oil_OOS")
Return_DF_OOS = Return_DF_OOS %>% returns(series = c("SP500_OOS","Gold_OOS","Oil_OOS")) %>% mutate(Date = as.Date(Date))
#Making a data frame
Return_DF_OOS = cbind.data.frame(SP500_OOS, Gold_OOS$Value , Oil_OOS$Value ); names(Return_DF_OOS) = c("Date", "SP500_OOS", "Gold_OOS", "Oil_OOS")
Return_DF_OOS = Return_DF_OOS %>% returns(series = c("SP500_OOS","Gold_OOS","Oil_OOS")) %>% mutate(Date = as.Date(Date))
View(Return_DF_OOS)
urgarchforecast(SP_garch, n.ahed = 1 )
pacman::p_load(tidyverse, rugarch)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
urgarchforecast(SP_garch, n.ahed = 1 )
ugarchforecast(SP_garch, n.ahed = 1 )
Spec = ugarchspec(variance.model = list( model = "sGARCH", garchOrder = c(1,1)),
mean.model = list( armaOrder = c(0,0) , include.mean = F) )
SP_garch = ugarchfit(Spec, data = SP500_returns , solver = "hybrid")
ugarchforecast(SP_garch, n.ahed = 1 )
ugarchforecast(SP_garch, n.ahead = 1 )
forecast = ugarchforecast(SP_garch, n.ahead = 1 )
forecast@forecast$sigmaFor
forecast = ugarchforecast(SP_garch, n.ahead = 10 , data = SP500_returns , out.sample = SP500_returns_OOS )
forecast
forecast = ugarchforecast(SP_garch, n.ahead = 10 , n.roll = 5, data = SP500_returns , out.sample = SP500_returns_OOS )
forecast = ugarchforecast(SP_garch, n.ahead = 10 , n.roll = 1)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
pacman::p_load(tidyverse,rmgarch,mgarchBEKK)
source("./DataAndReturnFct.R")
installed.packages("rstudioapi")
install.packages("tidyverse")
install.packages("rmgarch")
install.packages("mgarchBEKK")
pacman::p_load(tidyverse,rmgarch,mgarchBEKK)
install.packages("pacman")
pacman::p_load(tidyverse,rmgarch,mgarchBEKK)
source("./DataAndReturnFct.R")
DF = Return_DF[,5:7] %>% as.data.frame() %>% as.matrix()
OS = Return_DF_OOS[,5:7] %>% as.data.frame() %>% as.matrix()
DF = Return_DF[,5:7] %>% as.data.frame() %>% as.matrix()
OS = Return_DF_OOS[,5:7] %>% as.data.frame() %>% as.matrix()
Rolling_BEKK = function(IS , OS , Spec,dim = 3){
#browser()
IS = IS %>% as.data.frame() ; OS = OS %>% as.data.frame() ; names(OS) <- names(IS)
All_Data = rbind(IS,OS) %>% as.matrix()
n = length(IS[,1])
m = length(OS[,1])
OneSigma = list()
for (i in 1:m) {
Current_Data = All_Data[i:(n-1+i),]
Fit = BEKK(as.matrix(Current_Data),order = Spec,method = "BFGS")
C = Fit$est.params[[1]]
A = Fit$est.params[[2]]
B = Fit$est.params[[3]]
H = Fit$H.estimated[[n]]
res = c()
for(j in 1:dim){
res = c(res,Fit$residuals[[j]][n])
}
forecast = C%*%t(C) + A%*%res%*%t(res)%*%t(A) + B%*%H%*%t(B)
OneSigma[[i]] = forecast
}
return(OneSigma)
}
Rolling_BEKK = function(IS , OS , Spec,dim = 3){
#browser()
IS = IS %>% as.data.frame() ; OS = OS %>% as.data.frame() ; names(OS) <- names(IS)
All_Data = rbind(IS,OS) %>% as.matrix()
n = length(IS[,1])
m = length(OS[,1])
OneSigma = list()
for (i in 1:m) {
Current_Data = All_Data[i:(n-1+i),]
Fit = BEKK(as.matrix(Current_Data),order = Spec,method = "BFGS")
C = Fit$est.params[[1]]
A = Fit$est.params[[2]]
B = Fit$est.params[[3]]
H = Fit$H.estimated[[n]]
res = c()
for(j in 1:dim){
res = c(res,Fit$residuals[[j]][n])
}
forecast = C%*%t(C) + A%*%res%*%t(res)%*%t(A) + B%*%H%*%t(B)
OneSigma[[i]] = forecast
print(c("Iteration = ",i),sep="\n")
}
return(OneSigma)
}
mod = Rolling_BEKK(DF,OS,c(1,1),dim = 3)
Rolling_BEKK = function(IS , OS , Spec,dim = 3){
#browser()
IS = IS %>% as.data.frame() ; OS = OS %>% as.data.frame() ; names(OS) <- names(IS)
All_Data = rbind(IS,OS) %>% as.matrix()
n = length(IS[,1])
m = length(OS[,1])
OneSigma = list()
for (i in 1:m) {
Current_Data = All_Data[i:(n-1+i),]
Fit = BEKK(as.matrix(Current_Data),order = Spec,method = "BFGS",verbose=T)
C = Fit$est.params[[1]]
A = Fit$est.params[[2]]
B = Fit$est.params[[3]]
H = Fit$H.estimated[[n]]
res = c()
for(j in 1:dim){
res = c(res,Fit$residuals[[j]][n])
}
forecast = C%*%t(C) + A%*%res%*%t(res)%*%t(A) + B%*%H%*%t(B)
OneSigma[[i]] = forecast
print(c("Iteration = ",i),sep="\n")
}
return(OneSigma)
}
mod = Rolling_BEKK(DF,OS,c(1,1),dim = 3)
Rolling_BEKK = function(IS , OS , Spec,dim = 3){
#browser()
IS = IS %>% as.data.frame() ; OS = OS %>% as.data.frame() ; names(OS) <- names(IS)
All_Data = rbind(IS,OS) %>% as.matrix()
n = length(IS[,1])
m = length(OS[,1])
OneSigma = list()
for (i in 1:m) {
Current_Data = All_Data[i:(n-1+i),]
Fit = BEKK(as.matrix(Current_Data),order = Spec,method = "BFGS",verbose=F)
C = Fit$est.params[[1]]
A = Fit$est.params[[2]]
B = Fit$est.params[[3]]
H = Fit$H.estimated[[n]]
res = c()
for(j in 1:dim){
res = c(res,Fit$residuals[[j]][n])
}
forecast = C%*%t(C) + A%*%res%*%t(res)%*%t(A) + B%*%H%*%t(B)
OneSigma[[i]] = forecast
print(c("Iteration = ",i),sep="\n")
}
return(OneSigma)
}
mod = Rolling_BEKK(DF,OS,c(1,1),dim = 3)
View(mod)
sig1 = c()
for (i in mod){
sig1 = c(sig1, i[1,1])
}
plot(sig1)
View(DF)
plot(sig1,OS[,1]^2)
plot(sig1,OS[,1]^2,type = "l")
plot(OS[,1])
plot(abs(OS[,1]), type = "l", )
lines(sig1,type = "l")
View(OS)
View(OS)
save(mod,file = "BEKK_forecasts.Rdata")
getwd
getwd()
