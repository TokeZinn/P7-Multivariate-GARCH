library(maps)
setwd("~/R_files")
library(sp)
install.packages("maps")
install.packages("sp")
df = maps::us.cities
source('~/R_files/Travelling salesman.R', echo=TRUE)
set.seed(1)
start.time <- Sys.time()
#S = TSMP(SP = SP,df = df, i_max = 2e5,cooling = 0.999,start = FALSE,prev = B); Total_distance(S)
S = TSMP2(SP = SP,df = df, i_max = 2e5,start = FALSE,prev = B); Total_distance(S)
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken
#set.seed(1337)
set.seed()
start.time <- Sys.time()
S = repp(x); Total_distance(S)
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken
B=S
#set.seed(1337)
set.seed()
start.time <- Sys.time()
S = repp(x); Total_distance(S)
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken
B=S
#K = sample(1:length(df[,1]))
#set.seed(1337)
set.seed()
start.time <- Sys.time()
S = repp(x); Total_distance(S)
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken
B=S
S = repp(x); Total_distance(S)
repp = function(x){
#browser()
S = TSMP2(SP = SP_cap,df = df_cap,i_max = 1e4)
Best = S
for(i in 1:100){
set.seed(i+200)
S = TSMP2(SP = SP_cap,df = df_cap,i_max = 1e4)
#browser()
if (Total_distance(S)< Total_distance(Best)){
Best = S
}
Cat("Outer iteration =", i, "\n")
}
return(Best)
}
#write.csv(B, file = "Route2.csv")
#write.csv(B, file = "Route.csv")
K = read.csv("Route.csv")
K = K[,2]
Total_distance(K)
draw.route(K,df)
repp = function(x){
#browser()
S = TSMP2(SP = SP_cap,df = df_cap,i_max = 1e4)
Best = S
for(i in 1:100){
set.seed(i+200)
S = TSMP2(SP = SP_cap,df = df_cap,i_max = 1e4)
#browser()
if (Total_distance(S)< Total_distance(Best)){
Best = S
}
Cat("Outer iteration =", i, "\n")
}
return(Best)
}
start.time <- Sys.time()
S = repp(x); Total_distance(S)
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken
B=S
draw.route(S,df_cap)
require(graphics)
curve(y = sqrt(2*x/8))
curve(y = sqrt(2*x/8),from=0,to=10)
curve(expr = sqrt(2*x/8),from=0,to=10)
curve(expr = sqrt(2*x/8),from=0,to=10,ylim = c(-3,3))
curve(expr = 4*y^2,from=0,to=10,ylim = c(-3,3))
x = seq(from=0,to=10,length.out=1000)
y = seq(from=0,to=10,length.out = 1000)
plot(sqrt(2*x/8))
line(4*y^2)
lines(4*y^2)
lines(sqrt(x/4))
plot(sqrt(2*x/8))
lines(sqrt(x/4))
lines(-sqrt(x/4))
plot(sqrt(2*x/8),ylim = c(-2,2))
lines(-sqrt(x/4))
plot(sqrt(2*x/8),ylim = c(-2,2),type="l")
lines(-sqrt(x/4))
plot(4*x^2)
plot(sqrt(2*x/8),ylim = c(-2,2),type="l")
lines(-sqrt(x/4))
plot(sqrt(2*x/8),x,ylim = c(-2,2),type="l")
plot(sqrt(2*x/8),ylim = c(-2,2),type="l")
plot(x,sqrt(2*x/8),ylim = c(-2,2),type="l")
lines(-sqrt(x/4))
lines(-sqrt(x/4))
lines(-sqrt(2*x/8))
plot(x,sqrt(2*x/8),ylim = c(-2,2),type="l")
lines(-sqrt(2*x/8))
lines(x,-sqrt(2*x/8))
plot(x,sqrt(2*x/8),ylim = c(-2,2),type="l")
lines(x,-sqrt(2*x/8))
lines(x,4*x^2)
x = seq(from=0,to=1,length.out=1000)
y = seq(from=0,to=1,length.out = 1000)
plot(x,sqrt(2*x/8),ylim = c(-2,2),type="l")
lines(x,-sqrt(2*x/8))
lines(x,4*x^2)
plot(x,sqrt(2*x/8),ylim = c(-0.4,0.4),type="l")
lines(x,-sqrt(2*x/8))
lines(x,4*x^2)
plot(x,sqrt(2*x/8),ylim = c(-0.4,0.4),type="l")
lines(x,-sqrt(2*x/8))
ugarch)
library(Ecdat)
data(SP500,package="Ecdat")
returnBlMon = SP500$r500[1805] ; returnBlMon
x = SP500$r500[(1804-2*253+1):1804]
ts.plot(c(x,returnBlMon))
spec = ugarchspec(mean.model=list(armaOrder=c(1,0)),
variance.model=list(garchOrder=c(1,1)),
distribution.model = "std")
fit = ugarchfit(data=x, spec=spec)
dfhat = coef(fit)[6]
forecast = ugarchforecast(fit, data=x, n.ahead=1)
library(rugarch)
library(Ecdat)
data(SP500,package="Ecdat")
returnBlMon = SP500$r500[1805] ; returnBlMon
x = SP500$r500[(1804-2*253+1):1804]
ts.plot(c(x,returnBlMon))
spec = ugarchspec(mean.model=list(armaOrder=c(1,0)),
variance.model=list(garchOrder=c(1,1)),
distribution.model = "std")
fit = ugarchfit(data=x, spec=spec)
dfhat = coef(fit)[6]
forecast = ugarchforecast(fit, data=x, n.ahead=1)
library(rugarch)
library(Ecdat)
data(SP500,package="Ecdat")
install.packages("Ecdat")
library(Ecdat)
data(SP500,package="Ecdat")
returnBlMon = SP500$r500[1805] ; returnBlMon
library(rugarch)
library(Ecdat)
data(SP500,package="Ecdat")
returnBlMon = SP500$r500[1805] ; returnBlMon
x = SP500$r500[(1804-2*253+1):1804]
ts.plot(c(x,returnBlMon))
spec = ugarchspec(mean.model=list(armaOrder=c(1,0)),
variance.model=list(garchOrder=c(1,1)),
distribution.model = "std")
fit = ugarchfit(data=x, spec=spec)
dfhat = coef(fit)[6]
forecast = ugarchforecast(fit, data=x, n.ahead=1)
sigma = sigma(forecast)
pt(-0.228,dfhat)/(sqrt((dfhat-2)/dfhat)*sigma)
qt(-0.228,dfhat)/(sqrt((dfhat-2)/dfhat)*sigma)
libaray(fGarch)
library(fGarch)
install.packages("fGarch")
library(fGarch)
pstd(-0.228,mean=0,sd=sigma,nu=dfhat)
pstd(-0.228,mean=fitted(forecast),sd=sigma,nu=dfhat)
pstd(-0.228,mean=fitted(forecast),sd=sigma,nu=dfhat)
a = pstd(-0.228,mean=fitted(forecast),sd=sigma,nu=dfhat)
a*100
View(fit)
fit@fit$residuals
var(res)
res = fit@fit$residuals
var(res)
res = res/fit@fit$sigma
plot(res)
ACF(res)
library(tseries)
ACF(res)
acfF(res)
acf(res)
pacf(res)
pacf(res^2)
acf(res^2)
spec2 = ugarchspec(mean.model=list(armaOrder=c(1,0)),
variance.model=list(garchOrder=c(1,0)),
distribution.model = "std")
fit2 = ugarchfit(data=x, spec=spec2)
spec2 = ugarchspec(mean.model=list(armaOrder=c(1,0)),
variance.model=list(garchOrder=c(1,0)),
distribution.model = "std")
fit2 = ugarchfit(data=x, spec=spec2)
res2 = fit2@fit$residuals
res2 = res2/fit2@fit$sigma
acf(res)
acf(res2)
acf(res2^2)
acf(res2)
arima(x,order = c(1,0,0))
fit3 = arima(x,order = c(1,0,0))
residuals(fit3)
res3 = residuals(fit3)
res3 = res3/sqrt(fit3$sigma2)
acf(res3)
acf(res3^2)
a =pstd(-0.228,mean=fitted(forecast),sd=sigma,nu=dfhat)
a
checkresiduals(res)
forecast::checkresiduals(res)
fert = read.table("https://archive.ics.uci.edu/ml/machine-learning-databases/00244/fertility_Diagnosis.txt", sep = ",")
View(fert)
Colnames(fert) = c("Season", "Age", "Disease","Accident","Surgery","Fever","Alcohol","Smoking","Sitting","Output")
names(fert) = c("Season", "Age", "Disease","Accident","Surgery","Fever","Alcohol","Smoking","Sitting","Output")
head(fert)
library(tidyverse)
data = fert %>% as.tibble()
nor = fert[fert$Output == "N",]
nor <- nor[,-10]
pairs(nor)
cor(nor)
pr.nor = prcomp(nor)
pr.nor
screeplot(pr.nor)
biplot(pr.nor)
pr.sta.nor = prcomp(nor,scale = T)
screeplot(pr.sta.nor)
factanal(nor,factors = 3,scores = "Bartlett")
factanal(nor,factors = 2,scores = "Bartlett")
factanal(nor,factors = 1,scores = "Bartlett")
factanal(nor,factors = 1,scores = "regression")
factanal(nor,factors = 3,scores = "regression")
factanal(nor,factors = 3)
factanal(pr.sta.nor,factors = 3)
factanal(nor,factors = 3)
factanal(nor,factors = 3,rotation = varimax)
factanal(nor,factors = 3,rotation = "varimax")
factanal(nor,factors = 2,rotation = "varimax")
y <- c(2, 5, 1, 6, 1, 1, 1, 1, 3, 4, 1, 2, 1, 2, 2, 2, 4, 2, 2, 5, 20, 2, 1, 1, 1, 1)
summary(y)
## Min. 1st Qu. Median Mean 3rd Qu. Max.
## 1.000 1.000 2.000 2.846 2.750 20.000
c(mean(y), var(y), sd(y))
B <- 500
for(i in 1:B)
glm(data = y,formula = ..., family = poisson())
glm(data = y,formula = ..., family = poisson)
glm(data = y,formula = y~1, family = poisson)
glm(y~1, family = poisson, data = y)
glm(y~rep(1,length(y)), family = poisson, data = y)
glm(y~1, family = poisson, data = y)
return(c(mu,i))
asymp = function(y){
mu = mean(y)
i = length(y)*mu^2
return(c(mu,i))
}
asymp(y)
asymp = function(y){
mu = mean(y)
i = length(y)*mu^2
return(c(mu,1/i))
}
asymp(y)
asymp = function(y){
mu = mean(y)
theta = 1/mu
i = length(y)*mu^2
return(c(mu,1/i))
}
asymp(y)
boot = function(y,B){
theta = c()
for(i in 1:B){
y2 <- sample(y, replace=T)
theta = c(theta,asymp(y2)[1])
}
}
boot(y,B)
boot = function(y,B){
theta = c()
for(i in 1:B){
y2 <- sample(y, replace=T)
theta = c(theta,asymp(y2)[1])
}
return(theta)
}
boot(y,B)
hat = boot(y,B)
hist(hat)
mean(hat)
c(mean(y), var(y), sd(y))
var(hat)
asymp(y)[2]
asymp = function(y){
mu = mean(y)
theta = 1/mu
i = length(y)/theta^2
return(c(theta,1/i))
}
asymp(y)
var(hat)
B <- 5000
boot = function(y,B){
theta = c()
for(i in 1:B){
y2 <- sample(y, replace=T)
theta = c(theta,asymp(y2)[1])
}
return(theta)
}
hat = boot(y,B)
hist(hat)
B <- 1000
boot = function(y,B){
theta = c()
for(i in 1:B){
y2 <- sample(y, replace=T)
theta = c(theta,asymp(y2)[1])
}
return(theta)
}
hat = boot(y,B)
hist(hat)
B <- 100000
boot = function(y,B){
theta = c()
for(i in 1:B){
y2 <- sample(y, replace=T)
theta = c(theta,asymp(y2)[1])
}
return(theta)
}
hat = boot(y,B)
hist(hat)
B <- 1000000
boot = function(y,B){
theta = c()
for(i in 1:B){
y2 <- sample(y, replace=T)
theta = c(theta,asymp(y2)[1])
}
return(theta)
}
hat = boot(y,B)
B <- 100000
boot = function(y,B){
theta = c()
for(i in 1:B){
y2 <- sample(y, replace=T)
theta = c(theta,asymp(y2)[1])
}
return(theta)
}
hat = boot(y,B)
B <- 10000
boot = function(y,B){
theta = c()
for(i in 1:B){
y2 <- sample(y, replace=T)
theta = c(theta,asymp(y2)[1])
}
return(theta)
}
hat = boot(y,B)
hist(hat)
mean(hat)
var(hat)
B <- 500000
boot = function(y,B){
theta = c()
for(i in 1:B){
y2 <- sample(y, replace=T)
theta = c(theta,asymp(y2)[1])
}
return(theta)
}
hat = boot(y,B)
hist(hat)
mean(hat)
var(hat)
v = 0:10
zoo::rollapply(zoo(v), 3, function(x) all(x == c(0,1)))
install.packages("zoo")
install.packages("zoo")
zoo::rollapply(zoo(v), 3, function(x) all(x == c(0,1)))
library(zoo)
rollapply(zoo(v), 3, function(x) all(x == c(0,1)))
v = 0:11
rollapply(zoo(v), 3, function(x) all(x == c(0,1)))
zoo(v)
rollapply(v, 3, function(x) all(x == c(0,1)))
v
rollapply(v, length(x), function(x) all(x == c(0,1)))
rollapply(v, 2, function(x) all(x == c(0,1)))
sum(rollapply(v, 2, function(x) all(x == c(0,1))))
v = rbinom(10,1,0,3)
v = rbinom(10,1,0.3)
sum(rollapply(v, 2, function(x) all(x == c(0,1))))
v
model = BEKK(as.data.frame(Return_DF[,5:7]), order = c(1, 1), params = NULL, fixed = NULL, method = "BFGS",
verbose = F)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
pacman::p_load(tidyverse,rmgarch,mgarchBEKK)
source("./DataAndReturnFct.R")
model = BEKK(as.data.frame(Return_DF[,5:7]), order = c(1, 1), params = NULL, fixed = NULL, method = "BFGS",
verbose = F)
model = BEKK(as.data.frame(Return_DF[,5:7]), order = c(1, 1), params = NULL, fixed = NULL
, method = "nelder-mead",
verbose = F)
model = BEKK(as.data.frame(Return_DF[,5:7]), order = c(1, 1), params = NULL, fixed = NULL
, method = "Nelder-Mead",
verbose = F)
