Y <- (data-mu)/sigma
w <- weight(Y)
WLR <- w(Y)*(log(density1)-log(density2))
WLR.bar <- sum(WLR)/n
hacsigma <- sqrt( sum(WLR^2)/n )
t <- WLR.bar*sqrt(n)/(hacsigma)
p <- pnorm(t)
best = "Not significally different"
if(p<alpha/2){
best = "Density 2"
}
if(p>1-alpha/2){
best = "Density 1"
}
p.value <- pnorm(1-abs(t))
return(list(P-value = p.value,
Statistic =t,
Best_density = best))
}
WLR.test(y, w, density1 = dnorm(y,sd = 1.01), density2 = dnorm(y), mu = 0, sigma=1)
WLR.test = function(data,weight,density1,density2,mu=0,sigma=1,alpha = 0.05){
#browser()
n <- length(data)
Y <- (data-mu)/sigma
w <- weight(Y)
WLR <- w(Y)*(log(density1)-log(density2))
WLR.bar <- sum(WLR)/n
hacsigma <- sqrt( sum(WLR^2)/n )
t <- WLR.bar*sqrt(n)/(hacsigma)
p <- pnorm(t)
best = "Not significally different"
if(p<alpha/2){
best = "Density 2"
}
if(p>1-alpha/2){
best = "Density 1"
}
p.value <- pnorm(1-abs(t))
return(list(P-value = p.value,
Statistic =t,
Best_density = best))
}
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("DataAndReturnFct.R")
WLR.test = function(data,weight,density1,density2,mu=0,sigma=1,alpha = 0.05){
#browser()
n <- length(data)
Y <- (data-mu)/sigma
w <- weight(Y)
WLR <- w(Y)*(log(density1)-log(density2))
WLR.bar <- sum(WLR)/n
hacsigma <- sqrt( sum(WLR^2)/n )
t <- WLR.bar*sqrt(n)/(hacsigma)
p <- pnorm(t)
best = "Not significally different"
if(p<alpha/2){
best = "Density 2"
}
if(p>1-alpha/2){
best = "Density 1"
}
p.value <- pnorm(1-abs(t))
return(list(P-value = p.value,
Statistic =t,
Best_density = best))
}
WLR.test(y, w, density1 = dnorm(y,sd = 1.01), density2 = dnorm(y), mu = 0, sigma=1)
set.seed(912);y <- rnorm(1000, sd = 1.01)
w = function(x){
return(1)
}
set.seed(912)
y <- rnorm(1000, sd = 1.01)
w = function(x){
return(1)
}
WLR.test(y, w, density1 = dnorm(y,sd = 1.01), density2 = dnorm(y), mu = 0, sigma=1)
WLR.test = function(data,weight,density1,density2,mu=0,sigma=1,alpha = 0.05){
#browser()
n <- length(data)
Y <- (data-mu)/sigma
w <- weight(Y)
WLR <- w(Y)*(log(density1)-log(density2))
WLR.bar <- sum(WLR)/n
hacsigma <- sqrt( sum(WLR^2)/n )
t <- WLR.bar*sqrt(n)/(hacsigma)
p <- pnorm(t)
best = "Not significally different"
if(p<alpha/2){
best = "Density 2"
}
if(p>1-alpha/2){
best = "Density 1"
}
p.value <- pnorm(1-abs(t))
return(list(P-value = p.value,
Statistic =t,
Best_density = best))
}
WLR.test = function(data,weight,density1,density2,mu=0,sigma=1,alpha = 0.05){
#browser()
n <- length(data)
Y <- (data-mu)/sigma
w <- weight(Y)
WLR <- w(Y)*(log(density1)-log(density2))
WLR.bar <- sum(WLR)/n
hacsigma <- sqrt( sum(WLR^2)/n )
t <- WLR.bar*sqrt(n)/(hacsigma)
p <- pnorm(t)
best = "Not significally different"
if(p<alpha/2){
best = "Density 2"
}
if(p>1-alpha/2){
best = "Density 1"
}
p.value <- pnorm(1-abs(t))
return(list(P-value = p.value,
Statistic = t,
Best_density = best ))
}
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("DataAndReturnFct.R")
WLR.test = function(data,weight,density1,density2,mu=0,sigma=1,alpha = 0.05){
#browser()
n <- length(data)
Y <- (data-mu)/sigma
w <- weight(Y)
WLR <- w(Y)*(log(density1)-log(density2))
WLR.bar <- sum(WLR)/n
hacsigma <- sqrt( sum(WLR^2)/n )
t <- WLR.bar*sqrt(n)/(hacsigma)
p <- pnorm(t)
best = "Not significally different"
if(p<alpha/2){
best = "Density 2"
}
if(p>1-alpha/2){
best = "Density 1"
}
p.value <- pnorm(1-abs(t))
return(list(P_value = p.value,
Statistic = t,
Best_density = best ))
}
set.seed(912)
y <- rnorm(1000, sd = 1.01)
w = function(x){
return(1)
}
WLR.test(y, w, density1 = dnorm(y,sd = 1.01), density2 = dnorm(y), mu = 0, sigma=1)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
pacman::p_load(mvtnorm,tidyverse,emdbook)
source("DataAndReturnFct.R")
WLR.test = function(data,weight = function(x){rep(1,length(x))},density1,
density2,alpha = 0.05){
#browser()
n <- length(data[,1]);m <- length(data[1,])
Y <- as.matrix(data)
#Y <- (data-mu)%*%solve(Hsqr)
w <- weight(Y)
WLR <- w*(log(density1(Y))-log(density2(Y)))
WLR.bar <- sum(WLR)/n
hacsigma <- sqrt( sum(WLR^2)/n )
t <- WLR.bar*sqrt(n)/(hacsigma)
p <- pnorm(t)
best = "Not significally different"
if(p<alpha/2){
best = "Density 2"
}
if(p>1-alpha/2){
best = "Density 1"
}
p.value <- 2*min(c(1-pnorm(t),pnorm(t)))
return(list(P_value = p.value,
Statistic = t,
Best_density = best ))
}
set.seed(711)
k = rmvnorm(3,sigma = diag(1,nrow=100)) %>% t()
d1 = function(x){
dmvnorm(x,mu = rep(0,times = 3),
Sigma=diag(1,nrow=length(x[1,]),ncol=length(x[1,])))
}
d3 = function(x){
dmvnorm(x,mu = rep(0,times = 3),
Sigma=diag(1.2,nrow=length(x[1,]),ncol=length(x[1,])))
}
d2 = function(x){
dmvt(x,delta = rep(0,times = 3),
sigma=diag(1,nrow=length(x[1,]),ncol=length(x[1,])),
df = 3, log = F)
}
h =WLR.test(data = k,density1 = d1,density2 = d3)
h$P_value
h$Best_density
WLR.test(data = k,density1 = d1,density2 = d3)
h =WLR.test(data = k,density1 = d1,density2 = d3)
h$P_value
1-(1-1/100)^100
1-(1-1/1000)^1000
1-(1-1/100000000000000)^100000000000000
1-(1-1/10000000000000000000000000000)^10000000000000000000000000000
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
pacman::p_load(mvtnorm,tidyverse,emdbook)
source("DataAndReturnFct.R")
source("MVWLR.R")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
pacman::p_load(mvtnorm,tidyverse,emdbook)
source("DataAndReturnFct.R")
source("MVWLR.R")
load("BEKK_forecasts.Rdata")
DF = Return_DF[,5:7] %>% as.data.frame() %>% as.matrix()
OS = Return_DF_OOS[,5:7] %>% as.data.frame() %>% as.matrix()
library(mvtnorm)
D1 = function(x){
return(dmvnorm(x,mu = 0,Sigma = mod))
}
D1(OS)
D1 = function(x){
b = c()
for(i in 1:length(x)){
b = c(b,dmvnorm(x[i],mu = rep(0,length(x)),Sigma = mod[[i]]))
}
return(b)
}
D1(OS)
mod[[1]]
OS{1}
OS[1]
D1 = function(x){
b = c()
for(i in 1:length(x)){
b = c(b,dmvnorm(x[i,],mu = rep(0,length(x)),Sigma = mod[[i]]))
}
return(b)
}
D1(OS)
OS[1,]
D1 = function(x){
b = c()
for(i in 1:length(x)){
b = c(b,dmvnorm(x[i,],mu = rep(0,length(x[i,])),Sigma = mod[[i]]))
}
return(b)
}
D1(OS)
D1 = function(x){
b = c()
for(i in 1:length(x)){
b = c(b,dmvnorm(x[i,],mu = rep(0,length(x[i,])),Sigma = mod[[i]]))
}
return(b)
}
D1(OS)
D1 = function(x){
b = c()
for(i in 1:length(x)){
b = c(b,dmvnorm(x[i,],mu = rep(0,length(x[1,])),Sigma = mod[[i]]))
}
return(b)
}
D1(OS)
D1 = function(x){
b = c()
for(i in 1:length(x[,1])){
b = c(b,dmvnorm(x[i,],mu = rep(0,length(x[1,])),Sigma = mod[[i]]))
}
return(b)
}
D1(OS)
pacman::p_load(mvtnorm,tidyverse,emdbook,readxl)
read.csv("SP500_Roll")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
pacman::p_load(mvtnorm,tidyverse,emdbook,readxl)
read.csv("SP500_Roll")
read.csv("SP500_Roll.csv")
SP500_Roll = read.csv("SP500_Roll.csv") ; Gold_Roll = read.csv("Gold_Roll.csv")
Oil_Roll = read.csv("Oil_Roll.csv")
Restricted = list()
View(DF)
Restricted = list()
for(i in 1:187){
b = c(SP500_Roll,Gold_Roll, Oil_Roll)
Restricted[[i]] <- diag(b)
}
Restricted = list()
for(i in 1:187){
b = c(SP500_Roll[i],Gold_Roll[i], Oil_Roll[i])
Restricted[[i]] <- diag(b)
}
i = 1
b = c(SP500_Roll[i],Gold_Roll[i], Oil_Roll[i])
b
View(Gold_Roll)
Restricted = list()
for(i in 1:187){
b = c(SP500_Roll[i,2],Gold_Roll[i,2], Oil_Roll[i,2])
Restricted[[i]] <- diag(b)
}
b
Restricted = list()
for(i in 1:187){
b = c(SP500_Roll[i,2],Gold_Roll[i,2], Oil_Roll[i,2])
Restricted[[i]] <- diag(b)
}
D2 = function(x){
b = c()
for(i in 1:length(x[,1])){
b = c(b,dmvnorm(x[i,],mu = rep(0,length(x[1,])),Sigma = mod[[i]]))
}
return(b)
}
D2 = function(x){
b = c()
for(i in 1:length(x[,1])){
b = c(b,dmvnorm(x[i,],mu = rep(0,length(x[1,])),Sigma = Restricted[[i]]))
}
return(b)
}
WLR.test(OS,density1 = D1,density2 = D2)
View(Return_DF)
View(mod)
Restricted = list()
for(i in 1:187){
b = c(SP500_Roll[i,2]^2,Gold_Roll[i,2]^2, Oil_Roll[i,2]^2)
Restricted[[i]] <- diag(b)
}
D2 = function(x){
b = c()
for(i in 1:length(x[,1])){
b = c(b,dmvnorm(x[i,],mu = rep(0,length(x[1,])),Sigma = Restricted[[i]]))
}
return(b)
}
WLR.test(OS,density1 = D1,density2 = D2)
library(rugarch)
D1 = function(x){
b = c()
for(i in 1:length(x[,1])){
b = c(b,dmvnorm(x[i,],mu = rep(0,length(x[1,])),Sigma = mod[[i]]))
}
return(b)
}
Restricted = list()
for(i in 1:187){
b = c(SP500_Roll[i,2],Gold_Roll[i,2], Oil_Roll[i,2])
Restricted[[i]] <- diag(b)
}
D2 = function(x){
b = c()
for(i in 1:length(x[,1])){
b = c(b,dmvnorm(x[i,],mu = rep(0,length(x[1,])),Sigma = Restricted[[i]]))
}
return(b)
}
WLR.test(OS,density1 = D1,density2 = D2)
Restricted = list()
for(i in 1:187){
b = c(SP500_Roll[i,2]^2,Gold_Roll[i,2]^2, Oil_Roll[i,2]^2)
Restricted[[i]] <- diag(b)
}
D2 = function(x){
b = c()
for(i in 1:length(x[,1])){
b = c(b,dmvnorm(x[i,],mu = rep(0,length(x[1,])),Sigma = Restricted[[i]]))
}
return(b)
}
WLR.test(OS,density1 = D1,density2 = D2)
source('C:/Users/Thomas/Dropbox/P6/P7/R dokumenter/GARCH_Fitting_Models.R', echo=TRUE)
source('C:/Users/Thomas/Dropbox/P6/P7/R dokumenter/Testing_forecasts.R', echo=TRUE)
var(DF)
Benchmark = function(IS , OS , Spec,dim = 3){
#browser()
IS = IS %>% as.data.frame() ; OS = OS %>% as.data.frame() ; names(OS) <- names(IS)
All_Data = rbind(IS,OS) %>% as.matrix()
n = length(IS[,1])
m = length(OS[,1])
OneSigma = list()
for (i in 1:m) {
Current_Data = All_Data[i:(n-1+i),]
OneSigma[[i]] = var(Current_Data)
print(c("Iteration = ",i),sep="\n")
}
return(OneSigma)
}
Benchmark = function(IS , OS ,dim = 3){
#browser()
IS = IS %>% as.data.frame() ; OS = OS %>% as.data.frame() ; names(OS) <- names(IS)
All_Data = rbind(IS,OS) %>% as.matrix()
n = length(IS[,1])
m = length(OS[,1])
OneSigma = list()
for (i in 1:m) {
Current_Data = All_Data[i:(n-1+i),]
OneSigma[[i]] = var(Current_Data)
print(c("Iteration = ",i),sep="\n")
}
return(OneSigma)
}
bench = Benchmark(DF,OS)
bench = Benchmark(DF,OS)
Benchmark = function(IS , OS ,dim = 3){
#browser()
IS = IS %>% as.data.frame() ; OS = OS %>% as.data.frame() ; names(OS) <- names(IS)
All_Data = rbind(IS,OS) %>% as.matrix()
n = length(IS[,1])
m = length(OS[,1])
OneSigma = list()
for (i in 1:m) {
Current_Data = All_Data[i:(n-1+i),]
OneSigma[[i]] = var(Current_Data)
}
return(OneSigma)
}
bench = Benchmark(DF,OS)
D3 = function(x){
b = c()
for(i in 1:length(x[,1])){
b = c(b,dmvnorm(x[i,],mu = rep(0,length(x[1,])),Sigma = bench[[i]]))
}
return(b)
}
WLR.test(OS,density1 = D3,density2 = D2)
WLR.test(OS,density1 = D3,density2 = D1)
WLR.test(OS,density1 = D3,density2 = D2)
WLR.test(OS,density1 = D3,density2 = D1)
WLR.test(OS,density1 = D1,density2 = D2)
WLR.test(OS,density1 = D2,density2 = D1)
WLR.test(OS,density1 = D2,density2 = D3)
WLR.test(OS,density1 = D1,density2 = D3)
WLR.test(OS,density1 = D1,density2 = D2)
install.packages("scoring")
library(scoring)
View(Gold_OOS)
View(Oil_Roll)
View(Return_DF)
View(Return_DF_OOS)
SP500_Roll = read.csv("SP500_Roll.csv") ; Gold_Roll = read.csv("Gold_Roll.csv")
Oil_Roll = read.csv("Oil_Roll.csv")
load("BEKK_forecasts.Rdata")
Benchmark = function(IS , OS ,dim = 3){
#browser()
IS = IS %>% as.data.frame() ; OS = OS %>% as.data.frame() ; names(OS) <- names(IS)
All_Data = rbind(IS,OS) %>% as.matrix()
n = length(IS[,1])
m = length(OS[,1])
OneSigma = list()
for (i in 1:m) {
Current_Data = All_Data[i:(n-1+i),]
OneSigma[[i]] = var(Current_Data)
}
return(OneSigma)
}
bench = Benchmark(DF,OS)
D3 = function(x){
b = c()
for(i in 1:length(x[,1])){
b = c(b,dmvnorm(x[i,],mu = rep(0,length(x[1,])),Sigma = bench[[i]]))
}
return(b)
}
D1 = function(x){
b = c()
for(i in 1:length(x[,1])){
b = c(b,dmvnorm(x[i,],mu = rep(0,length(x[1,])),Sigma = mod[[i]]))
}
return(b)
}
Restricted = list()
for(i in 1:187){
b = c(SP500_Roll[i,2]^2,Gold_Roll[i,2]^2, Oil_Roll[i,2]^2)
Restricted[[i]] <- diag(b)
}
D2 = function(x){
b = c()
for(i in 1:length(x[,1])){
b = c(b,dmvnorm(x[i,],mu = rep(0,length(x[1,])),Sigma = Restricted[[i]]))
}
return(b)
}
Benchmark = function(IS , OS ,dim = 3){
#browser()
IS = IS %>% as.data.frame() ; OS = OS %>% as.data.frame() ; names(OS) <- names(IS)
All_Data = rbind(IS,OS) %>% as.matrix()
n = length(IS[,1])
m = length(OS[,1])
OneSigma = list()
for (i in 1:m) {
Current_Data = All_Data[i:(n-1+i),]
OneSigma[[i]] = var(Current_Data)
}
return(OneSigma)
}
bench = Benchmark(DF,OS)
D3 = function(x){
b = c()
for(i in 1:length(x[,1])){
b = c(b,dmvnorm(x[i,],mu = rep(0,length(x[1,])),Sigma = bench[[i]]))
}
return(b)
}
WLR.test(OS,density1 = D2,density2 = D3)
WLR.test(OS,density1 = D1,density2 = D3)
WLR.test(OS,density1 = D1,density2 = D2)
WLR.test(OS,density1 = D1,density2 = D3)
WLR.test(OS,density1 = D2,density2 = D3)
WLR.test(OS,density1 = D1,density2 = D2)
view(DF)
View(DF)
View(Return_DF)
